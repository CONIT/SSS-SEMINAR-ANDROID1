/* * Copyright (C) 2012 CONIT Co., Ltd. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package jp.co.conit.sss.sp.ex1.activity;import jp.co.conit.sss.sp.ex1.R;import jp.co.conit.sss.sp.ex1.billing.BillingService;import jp.co.conit.sss.sp.ex1.billing.BillingService.RequestPurchase;import jp.co.conit.sss.sp.ex1.billing.BillingService.RestoreTransactions;import jp.co.conit.sss.sp.ex1.billing.Consts.ResponseCode;import jp.co.conit.sss.sp.ex1.billing.PurchaseDatabase;import jp.co.conit.sss.sp.ex1.billing.PurchaseObserver;import jp.co.conit.sss.sp.ex1.billing.ResponseHandler;import jp.co.conit.sss.sp.ex1.entity.Book;import jp.co.conit.sss.sp.ex1.fragment.BookPurchaseFragment;import jp.co.conit.sss.sp.ex1.fragment.BookPurchaseFragment.BillingListener;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.support.v4.app.FragmentActivity;import android.support.v4.app.FragmentTransaction;/** * 書籍の購入、書籍ダウンロード処理を提供するアクティビティです。 *  * @author conit */public class BookPurchaseActivity extends FragmentActivity implements BillingListener {    private SSSPurchaseObserver mSSSPurchaseObserver;    private Handler mHandler;    private BillingService mBillingService;    private PurchaseDatabase mPurchaseDatabase;    private Activity mSelf;    /**     * A {@link PurchaseObserver} is used to get callbacks when Android Market     * sends messages to this application so that we can update the UI.     */    private class SSSPurchaseObserver extends PurchaseObserver {        public SSSPurchaseObserver(Handler handler) {            super(mSelf, handler);        }        @Override        public void onBillingSupported(boolean supported) {        }        @Override        public void onPurchaseStateChange(String producId, String receipt, long purchaseTime) {            BookPurchaseFragment fragment = (BookPurchaseFragment) getSupportFragmentManager()                    .findFragmentById(R.id.book_purchase);            fragment.setPurchaceBtnEnable(true);            // 購入成功時            if (receipt != null && receipt != "") {                fragment.setPurchaceBtnTitle(getString(R.string.download));            }        }        @Override        public void onRequestPurchaseResponse(RequestPurchase request, ResponseCode responseCode) {            if (responseCode != ResponseCode.RESULT_OK) {                BookPurchaseFragment fragment = (BookPurchaseFragment) getSupportFragmentManager()                        .findFragmentById(R.id.book_purchase);                fragment.setPurchaceBtnEnable(true);            }        }        @Override        public void onRestoreTransactionsResponse(RestoreTransactions request,                ResponseCode responseCode) {        }    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_purchase);        mSelf = this;        Intent intent = getIntent();        Bundle extras = intent.getExtras();        Book book = (Book) extras.getSerializable("store_book");        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();        BookPurchaseFragment fragment = BookPurchaseFragment.newInstance(book);        transaction.replace(R.id.book_purchase, fragment);        transaction.commit();        initBilling();    }    /**     * In App-Billingの初期化処理です。     */    private void initBilling() {        mHandler = new Handler();        mSSSPurchaseObserver = new SSSPurchaseObserver(mHandler);        mBillingService = new BillingService();        mBillingService.setContext(this);        mPurchaseDatabase = new PurchaseDatabase(mSelf);        // Check if billing is supported.        ResponseHandler.register(mSSSPurchaseObserver);    }    @Override    protected void onStart() {        super.onStart();        ResponseHandler.register(mSSSPurchaseObserver);    }    @Override    protected void onStop() {        super.onStop();        ResponseHandler.unregister(mSSSPurchaseObserver);    }    @Override    protected void onDestroy() {        super.onDestroy();        if (mPurchaseDatabase != null) {            mPurchaseDatabase.close();        }        if (mBillingService != null) {            mBillingService.unbind();        }    }    @Override    public void onBuyProduct(String productId) {        if (!mBillingService.requestPurchase(productId, null)) {            // In App-Billingがサポートされていないケース        }    }}